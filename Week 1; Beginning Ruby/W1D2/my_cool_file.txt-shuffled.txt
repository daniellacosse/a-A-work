File.open("movie-times.txt") do |f|

# returns ["list_of_cats.txt"]
print "\n" # => adds a newline
f.puts "Lasers"

puts [1, 2, 3] # => prints "1\n2\n3\n"
Opening a file
In Ruby, you can access standard input and output through the global variables $stdout and $stdin. These variables just hold typical File objects. In particular, Kernel#gets and Kernel#puts just call $stdin.gets and $stdout.puts.

puts ARGV[0]
  first_line = f.gets.chomp
Write a number guessing game. The computer should choose a number between 1 and 100. It should prompt the user for guesses. Each time, it will prompt the user for a guess; it will return too high or too low. It should track the number of guesses the player took.

  # ...
A user can pass arguments to your script from the command line. For example, if your script counts a list of cats, the user could pass the name of a file that contains a list of cats:
puts "this" # => prints "this" with a newline
# "movie-times.txt"
# input
Notice also that puts adds newlines after each object in an array.
If you use File::open without a block, it returns an open File object. You'll be responsible for calling #close when you're done.
Finally, if you'd like to read the entire file into one long string, you may write:
  # ...
To open a file for writing, you need to pass "w" to File.open for write mode:

File.foreach("movie-times.txt") do |line|
See the if __FILE__ == $PROGRAM_NAME trick described in the debugger chapter.
The examples I've shown you have all automatically closed the file when done. It is important to close files when you are finished with them; this doesn't matter so much for reading (it is merely inefficient), but if you don't close a file you are writing to, then the whole output may not be written to disk, and you may lose data.
p "this" # => prints '"this"' with a newline; note the quotes

f.puts "Aeroplanes"
# will make sure output is "synced" to disk and properly saved
# returns an array, with each element representing a line of
Estimated time: 3hrs
print "this that other" # prints 'this that other' to console

contents = File.read("movie-times.txt")
print "this"
File.open("cool-things.txt", "w") do |f|
  f.puts "Aeroplanes"
Closing files
Since it's common to want to add newlines to the end, Ruby has another method puts. It's pretty simple:


Standard Output and Input
Write a program that prompts the user for a file name, reads that file, shuffles the lines, and saves it to the file "{input_name}-shuffled.txt". You could create a random number using the Random class, or you could use the shuffle method in array.

If, as is often the case, you want to do something once for each line:
puts ARGV

To read the lines individually, use readlines:


If you want to print an array out on one line, you probably want p.
print converts its argument to a string by calling Object#to_s, then it writes it out to the standard output.
contents = File.readlines("movie-times.txt")
In *nix operating systems (like Linux, BSD, and OS X), the console input and output are just special files. You can read and write to them like any other file. These are called standard input and standard output.

end
Finally, there is the Kernel#p method, which is like puts, but is used for debugging and the REPL (REPL means read-eval-print loop; irb is the standard Ruby REPL). Instead of calling Object#to_s, p calls Object#inspect. The main difference is:
Note: "w" mode will create a new file or overwrite an existing file. If you wish append to an existing file, you will need to use "a". For more file mode options check this SO post.
Exercises
You've written an RPN calculator. Practice by rewriting your version better than you had before. It should have a user interface which reads from standard input one operand or operator at a time. You should be able to invoke it as a script from the command line. You should be able to, optionally, give it a filename on the command line, in which case it opens and reads that file instead of reading user input.
Because the newline is often undesired, frequently we use String#chomp to remove it
f.puts "Race cars"
  f.puts "Race cars"
input = gets.chomp
print doesn't add a newline after it prints output, which means consecutive calls to print all print to the same line.


end
puts "this" # => prints "this" with a newline
end
print [1, 2, 3] # prints '[1, 2, 3]' to console

# get a string from the input, chop off the newline, store it in
# prints "list_of_cats.txt"
f.close
The class method File::open opens a file. You pass a block, and the block will be called with a File object passed in. To read data from a file, you can call File#gets, which works like Kernel#gets, except it reads from the file, rather than console.

To access the filename passed in, use ARGV in your script. ARGV) returns an array of strings that were typed after your script name. Example:
Because it is error-prone to rely on remembering to #close a file, prefer the block version of ::open, ::foreach, or ::read whenever possible. These will all automatically #close the file.




$ ruby my_cat_counter.rb list_of_cats.txt
  f.puts "Lasers"

You often want to read data in from files, rather than the console. The typical way to open a file is as follows:
print "that" # => prints "thisthat"
We've seen the methods Kernel#puts and Kernel#gets as well as File#puts and File#gets. Surprise! They're related!
f = File.open("cool-things.txt", "w")
Writing a file
print "I'm on a new line"
Command Line Arguments

